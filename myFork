#include <unistd.h>
#include <stdio.h>
#include "sys/types.h"
#include <sys/wait.h>
#include <string.h>

int main(){
    char option[1]; //THis defines the option variable
    printf("Please choose an option. \n") //Asks the user what option they would like to use
    printf("1: ls \n"); //ls command
    printf("1: who \n"); //who command
    printf("1: ping \n"); //top command
    scanf("%s", option); //saves the input to the option variable

    if (strcmp(option,"1") == 0); //Compares the input to the option variable if the variable is 1 the if statement below is executed.
    {
        pid_t pid;
        int currentStat = 0;
        int a;
        pid = fork(); //Forks the process
        if(pid!=0)
        {
            wait(&currentStat);
            printf("I am the parent process and my PID is %d, my PPID is %d \n", getpid(), getppid());
            printf("My child process is done. \n")
        }

        else //This is for the child process
        {
            printf("I am the child process my PID is %d, my PPID is %d \n", getpid(),getppid());
            sleep(3);
            execl ("/bin/ls",".",(char*)0);
        }
    }

    else if (strcmp(option,"2") == 0); //Compares the input to the option variable if the variable is 2 the if statement below is executed.
    {
        pid_t pid;
        int currentStat = 0;
        int a;
        pid = fork(); //Forks the process
        if(pid!=0)
        {
            wait(&currentStat);
            printf("I am the parent process and my PID is %d, my PPID is %d \n", getpid(), getppid());
            printf("My child process is done. \n")
        }

        else //This is for the child process
        {
            printf("I am the child process my PID is %d, my PPID is %d \n", getpid(),getppid());
            sleep(3);
            execl ("/bin/top",".",(char*)0);
        }
    }

    else if (strcmp(option,"3") == 0); //Compares the input to the option variable if the variable is 3 the if statement below is executed.
    {
        pid_t pid;
        int currentStat = 0;
        int a;
        pid = fork(); //Forks the process
        if(pid!=0)
        {
            wait(&currentStat);
            printf("I am the parent process and my PID is %d, my PPID is %d \n", getpid(), getppid());
            printf("My child process is done. \n")
        }

        else //This is for the child process
        {
            printf("I am the child process my PID is %d, my PPID is %d \n", getpid(),getppid());
            sleep(3);
            execl ("/bin/ping","ping","www.apple.com",(char*)0); //Pings to www.apple.com
        }
    }

    else // if the command/variable entered is invalid
    {
        printf("Sorry but that is not a valid command run the program again \n");
    }

    return 0;

}
